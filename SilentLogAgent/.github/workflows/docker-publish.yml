name: Build and Push Docker Image with Semantic Versioning

on:
  pull_request:
    branches:
      - master
    types:
      - closed

jobs:
  check_merge_condition:
    runs-on: ubuntu-latest
    steps:
      - name: Fail if not merged from development
        run: |
          echo "Merged: ${{ github.event.pull_request.merged }}"
          echo "Head ref: ${{ github.event.pull_request.head.ref }}"
          
          if [[ "${{ github.event.pull_request.merged }}" != "true" || "${{ github.event.pull_request.head.ref }}" != "development" ]]; then
            echo "PR must be merged from 'development' into 'master'"
            exit 1
          fi
        shell: bash

  if_merged:
    needs: check_merge_condition
    runs-on: ubuntu-latest

  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Get latest tag
        id: get_tag
        run: |
          git fetch --tags
          latest=$(git tag | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | sort -V | tail -n 1)
          echo "latest_tag=$latest" >> $GITHUB_OUTPUT

      - name: Determine next version
        id: bump_version
        run: |
          tag="${{ steps.get_tag.outputs.latest_tag }}"
          [[ -z "$tag" ]] && tag="v0.0.0"

          major=$(echo $tag | cut -d. -f1 | tr -d 'v')
          minor=$(echo $tag | cut -d. -f2)
          patch=$(echo $tag | cut -d. -f3)

          commit=$(git log -1 --pretty=%B)

          if echo "$commit" | grep -iq "#major"; then
            major=$((major + 1)); minor=0; patch=0
          elif echo "$commit" | grep -iq "#minor"; then
            minor=$((minor + 1)); patch=0
          else
            patch=$((patch + 1))
          fi

          new_tag="v$major.$minor.$patch"
          echo "new_tag=$new_tag" >> $GITHUB_OUTPUT
          echo "Will tag as $new_tag"

      - name: Build and Push Docker image
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/silent-log-agent:${{ steps.bump_version.outputs.new_tag }} .
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/silent-log-agent:${{ steps.bump_version.outputs.new_tag }}

      - name: Push Git Tag
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git tag ${{ steps.bump_version.outputs.new_tag }}
          git push origin ${{ steps.bump_version.outputs.new_tag }}