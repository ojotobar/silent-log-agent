name: Build and Push Docker Image with Auto Versioning

on:
  pull_request:
    branches:
      - master
    types:
      - closed

jobs:
  check_merge_condition:
    runs-on: ubuntu-latest
    outputs:
      should_deploy: ${{ steps.set_output.outputs.should_deploy }}
    steps:
      - name: Check if PR is merged from development
        id: set_output
        run: |
          echo "Merged: ${{ github.event.pull_request.merged }}"
          echo "Head ref: ${{ github.event.pull_request.head.ref }}"
          if [[ "${{ github.event.pull_request.merged }}" == "true" && "${{ github.event.pull_request.head.ref }}" == "development" ]]; then
            echo "✅ PR was merged from development"
            echo "should_deploy=true" >> $GITHUB_OUTPUT
          else
            echo "⛔️ PR must be merged from development"
            echo "should_deploy=false" >> $GITHUB_OUTPUT
        shell: bash

  build-and-push:
    needs: check_merge_condition
    if: needs.check_merge_condition.outputs.should_deploy == 'true'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Determine next version from DockerHub
        id: next_version
        run: |
          REPO="${{ secrets.DOCKERHUB_USERNAME }}/silent-log-agent"

          echo "Fetching tags from DockerHub repo: $REPO"

          tags=$(curl -s "https://hub.docker.com/v2/repositories/${REPO}/tags/?page_size=100" | jq -r '.results[].name' | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | sort -V)

          if [[ -z "$tags" ]]; then
            echo "No tags found. Starting from v1.0.0"
            new_tag="v1.0.0"
          else
            latest_tag=$(echo "$tags" | tail -n 1 | tr -d 'v')
            IFS='.' read -r major minor patch <<< "$latest_tag"

            patch=$((patch + 1))
            if [[ $patch -gt 9 ]]; then
              patch=0
              minor=$((minor + 1))
            fi
            if [[ $minor -gt 9 ]]; then
              minor=0
              major=$((major + 1))
            fi

            new_tag="v${major}.${minor}.${patch}"
            echo "Latest tag was v$latest_tag. New tag is $new_tag"
          fi

          echo "new_tag=$new_tag" >> $GITHUB_OUTPUT

      - name: Build and Push Docker Image
        run: |
          TAG=${{ steps.next_version.outputs.new_tag }}
          IMAGE=${{ secrets.DOCKERHUB_USERNAME }}/silent-log-agent:$TAG

          docker build -t $IMAGE .
          docker push $IMAGE

      - name: Tag and Push Git Tag
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git tag ${{ steps.next_version.outputs.new_tag }}
          git push origin ${{ steps.next_version.outputs.new_tag }}